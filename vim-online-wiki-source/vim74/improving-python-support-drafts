= How would perfect python support look like for Vim?
* threading support
* a way to write your plugins using python only. See startup dir below
* a way to halt python execution, eg by pressing ctrl-c (TODO)

== startup dir ==
We cannot put .py plugins into plugin, because some older plugins may have
placed their code their not expecting them to load randomly at startup.
Example plugin doing so: UltiSnips

Thus we need a new name.

* {{{pyplugin/}}}, would sound like "plugin"
* {{{startup/}}}, would be descriptive, and support for loading ruby, perl, ..
  files could be added supported easily
Which one is better, why ?


letting the user configure *which files to load*
Currently Vim has loadplugins option. If we want to support also ruby, perl
this way it would make sense to use one option for all:
{{{
loadplugins = 1 # be backward compatible: load vim only
loadpugins = vim,python2,python3 # load vim,python2,python3 plugins
}}}

A related implementation can be found in the pythonx patch (vim-dev
mailinglist).
 
== how to hide one plugins implementation from the other ?
Polluting global name space is not really an option.

Putting each plugin into a module explicitely would be perfect:
{{{

def load_or_reload_plugin(path)
  module_name = 'vim.plugin.%s' % basename(path).replace('.py','')
  imp.load_source(module_name, path)
  from vim.plugin_loaded_notifications import notify
  # tell all plugins that a plugin was loaded, they may want extend it
  notify(module_name)
}}}

== one plugin using features of another? (open issue)
See previous example load_or_reload_plugin


Your plugin can try:

{{{
try
  from vim.plugin.file_name import
catch:
  message "plugin does not exist"

from vim.plugin_loaded_notifications notify_me

plugin may be loaded later:
notify_me_on_plugin_load(lambda (name)
  if name == 'xxx':
    ..
)
}}}

Less problems would happen if rtp would be used to populate sys.path. Then
order of loading python plugins would matter less ?
