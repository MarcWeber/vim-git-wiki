= plugin management =

**Traditionally** plugins were mantained **manually** by **extracting files into
$HOME/.vim**. Wrong about this approach is that its hard to maintain because its
you having to keep track about which files belong to each plugin.
{{{:h plugin}}} tells you about this traditional way.

Little bit smarter is **creating a directory for each plugin** like this and
adding two lines to your .vimrc:

{{{
  ~/.vim/plugin-A/plugin/a.vim
  ~/.vim/plugin-A/filetype/a.vim
  ~/.vim/plugin-B/plugin/a.vim
  ~/.vim/plugin-B/filetype/a.vim
}}}


{{{
  " vimrc
  set runtimepath+=~/.vim/plugin-A
  set runtimepath+=~/.vim/plugin-B
}}}

This tells Vim that it should look for plugin files to source at startup in
additional directories. What's wrong about this?
Nothing except for example vim does not source plugin-A/plugin/after/*.vim
files.

**Pathogen** does exactly this by its {{{pathogen#infect}}}
and provides some more helper functions to run helptags etc

**Vundle** was also written to checkout plugin from git repositories

So both **Vundle** and **Pathogen** get the job done pretty well which is
why they are referenced often.

**VAM/vim-addon-manager** also tries to help you avoiding outdated plugins by
introducing a pool of known plugins.

FEATURES
rtp:: manipulate the runtimepath
activate plugins at runtime:: Activating plugins at runtime allows you to load ruby related plugins when you open a .rb file.
plugin name completion::
bootstrap from .vimrc:: you can write this code for the other managers easily
updating plugins::
install progress bar::
dependencies:: minimal dependency support
get-git:: install from git repositories
get-hg:: install from mercurial
get-svn:: install from svn
get-bazaar:: install from svn
get-vim.sf.net:: install from vim.sf.net
get-vim-scripts.org:: install from vim-scripts.org (git mirror of vim.sf.net)
bisect:: bisect problems by dividing the set of plugins to be activated
ships-with-vim:: Does the Vim distribution contain it?
?:: don't know it well enough, help fill in information


MATRIX
VAM:: rtp, get-git, get-hg, get-svn, get-bazaar, get-vim.sf.net, get-vim-scripts.org, activate plugins at runtime, plugin name completion, bootstrap from .vimrc, updating plugins, dependencies, bisect
Pathogen:: rtp
Vundle:: rtp, get-git, get-vim-scripts.org, install progress bar
GetLatestVimScripts:: get-vim.sf.net, updating plugins, dependencies, ships-with-vim
[[https://bitbucket.org/sharat87/vimpire|Vimpire]]:: get-hg ?
[[http://github.com/c9s/Vimana|Vimana]]:: ?
[[http://github.com/vimjolts/jolt|jolt]]:: ?
[[http://github.com/carllerche/vim-nicktears|vim-nicktears]]:: ?
[[http://www.vim.org/scripts/script.php?script_id=3135|Vim Srcipt Updater]]:: ?
[[https://code.google.com/p/windows-package-manager|Npackd]]:: get-git, get-hg, get-svn, get-bazaar, get-vim.sf.net, get-vim-scripts.org, updating plugins, dependencies, install progress bar

== Example .vimrc setups ==

**Pathogen**:
vimrc:
{{{
" you can tell pathogen which directories to infect
" this way it may also be possilbe to select "sets of plugins"
execute pathogen#infect()
}}}

**Vundle**:
vimrc:
{{{
set rtp+=~/.vim/vundle.git/ 
" These refer to git repositories:
Bundle 'gmarik/vundle'
Bundle 'tpope/vim-fugitive'
}}}


**VAM**:
vimrc:
{{{
  " recommended code checking out initial vim-addon-manager omitted here
  
  " plugin-name1 will be looked up from plugin pool
  " vim-addon-manager-known-repositories, however you can create that
  " plugin-name1 directory manually and put there any plugin code you like
  call vam#ActivateAddons(['plugin-name1', 'github:name/repo']
                        \ , {'auto_install': 1})

  " eg when opening a .c file activate plugin-for-c-development lazily
  let ft_addons = {
      \ '^\%(c\|cpp\)$': [ 'plugin-for-c-development' ],
      \ 'javascript': [ 'plugin-for-javascript' ]
    \ }
  au FileType * for l in values(filter(copy(ft_addons), string(expand('<amatch>')).' =~ v:key')) 
                  \ | call vam#ActivateAddons(l, {'force_loading_plugins_now':1}) 
                  \ | endfor
}}}
runtime:
{{{
  " most useful commands supporting tab completion:

  " fetch and activate at runtime (alias for vam#ActivateAddons)
  :ActivateAddons name1 name2 

  " show infos about name/script-id
  :AddonsInfo name
}}}

**GetLatestVimScripts**:

GetLatestVimScripts.dat:
{{{
    ScriptID SourceID Filename
    --------------------------
    294 1 :AutoInstall: Align.vim
    120 2 Decho.vim
     40 3 DrawIt.tar.gz
    451 4 EasyAccents.vim
    195 5 engspchk.vim
    642 6 GetLatestVimScripts.vim
    489 7 Manpageview.vim
}}}

.vimrc
{{{
  " optional
  let g:GetLatestVimScripts_allowautoinstall=1
  " or run :GLVS
}}}

**Npackd**:
Its a package manager for Windows which happens to contain some Vim plugins.
Pathogen, VAM etc can be used to load the plugins.

vimrc:
{{{
exec ':source ' . $ALLUSERSPROFILE . '/Npackd/VimPlugins/vim-pathogen/autoload/pathogen.vim'
execute pathogen#infect($ALLUSERSPROFILE . '/Npackd/VimPlugins/{}')
}}}

VAM will provide a xml source file for all plugins. Npackd support .bat files which
can be used to git/mercurial/... on Windows in the future in some way.


== supporting git only - is it a problem ? vim-scripts.org
Now it might look that being able to install from git repositories only is a major disadvantage.
Its not because there is [[http://vim-scripts.org|vim-scripts.org]] mirroring
[[http://www.vim.org|www.vim.org]] plugins in git repositories.

== plugin dependencies ==
Right now VAM is the only plugin manager which introduces a addon-info.json
file (which could be used by other tools) which allows to specify dependencies
by name (without version constraints). Those plugins are installed and
activated automatically.

== git submodules ==
They are used to embed git repositories into existing git repositories. Thus
style is used to reproduce the exact behaviour on a new machine. It can be used
with any plugin manager - as long as plugins are
checked out by git.


== windows support ==
Well, must plugins should work fine - however installing all dependencies (git,
mercurial, unzip, ...) can be tedious (VAM case). 
See [[http://vam.mawercer.de]], [[https://github.com/MarcWeber/vim-addon-manager/blob/master/doc/vim-addon-manager-additional-documentation.txt|VAM docs, section 10]]

This could be simplified - there was no need to do so yet.

== collections ==
[[topic/plugin-collections]]

== additional solutions and in some way related projects ==
[[https://bitbucket.org/howlanderson/vimapt|vimapt]] (I don't know much about it yet)

vimpyre: A python package managing vim scripts somehow. Its using pathogen to
manage loading of the scripts: https://github.com/pct/vimpyre

[[https://github.com/c9s/Vimana|Vimana]]

another list: [[http://vim-scripts.org/tools.html]]

There is another project called vim-addon-manager for debian, see
[[http://packages.debian.org/sid/vim-addon-manager|debian's vim-addon-manager]]
