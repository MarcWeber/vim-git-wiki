= plugin management =

**Traditionally** plugins were mantained **manually** by **extracting files into
$HOME/.vim**. Wrong about this approach is that its hard to maintain because its
you having to keep track about which files belong to each plugin.
{{{:h plugin}}} tells you about this traditional way.

Little bit smarter is **creating a directory for each plugin** like this and
adding two lines to your .vimrc:

{{{
  ~/.vim/plugin-A/plugin/a.vim
  ~/.vim/plugin-A/filetype/a.vim
  ~/.vim/plugin-B/plugin/a.vim
  ~/.vim/plugin-B/filetype/a.vim
}}}


{{{
  " vimrc
  set runtimepath+=~/.vim/plugin-A
  set runtimepath+=~/.vim/plugin-B
}}}

This tells Vim that it should look for plugin files to source at startup in
additional directories. What's wrong about this?
Nothing except for example vim does not source plugin-A/plugin/after/*.vim
files.

**Pathogen** does exactly this by its {{{pathogen#infect}}}
and provides some more helper functions to run helptags etc

**Vundle** was also written to checkout plugin from git repositories

So both **Vundle** and **Pathogen** get the job done pretty well which is
why they are referenced often.

**VAM/vim-addon-manager** also tries to help you avoiding outdated plugins by
introducing a pool of known plugins.

FEATURES
rtp: manipulate the runtimepath
get-git: install from git repositories
get-hg: install from mercurial
get-svn: install from svn
get-bazaar: install from svn
get-vim.sf.net: install from vim.sf.net
get-vim-scripts.org: install from vim-scripts.org (git mirror of vim.sf.net)
activate plugins at runtime:
plugin name completion:
bootstrap from .vimrc: you can write this code for the other managers easily
updating plugins:
install progress bar:
dependencies: minimal dependency support

MATRIX
VAM: rtp, get-git, get-hg, get-svn, get-bazaar, get-vim.sf.net, get-vim-scripts.org, activate plugins at runtime, plugin name completion, bootstrap from .vimrc, updating plugins, dependencies
Pathogen: rtp
Vundle: rtp, get-git, get-vim-scripts.org, install progress bar

== vim-scripts.org ==
Now it might look that being able to install from git repositories only is a major disadvantage.
Its not because there is [[http://vim-scripts.org|vim-scripts.org]] mirroring [[http://www.vim.org|www.vim.org]] plugins in git repositories.

== plugin dependencies ==
Right now VAM is the only plugin manager which introduces a addon-info.json
file (which could be used by other tools) which allows to specify dependencies
by name (without version constraints). Those plugins are installed and
activated automatically.

== git submodules ==
They are used to embed git repositories into existing git repositories. Thus
style is used to reproduce the exact behaviour on a new machine. It can be used
with any plugin manager - as long as plugins are
checked out by git.


== existing vim plugin collections ==
They often hint about important plugins - however Marc Weber thinks that they
fail it proper plugin management (cause he believes in VAM doing it the right way)

See janus, vimpyre and some others

== additional solutions and in some way related projects ==
[[https://bitbucket.org/howlanderson/vimapt|vimapt]] (I don't know much about it yet)

vimpyre: A python package managing vim scripts somehow. Its using pathogen to
manage loading of the scripts: https://github.com/pct/vimpyre

[[https://github.com/c9s/Vimana|Vimana]]

another list: [[http://vim-scripts.org/tools.html]]

There is another project called vim-addon-manager for debian, see
[[http://packages.debian.org/sid/vim-addon-manager|debian's vim-addon-manager]]
